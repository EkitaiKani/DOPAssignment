name: Login test
run-name: ${{ github.actor }} is testing the features

on:
  pull_request:
    branches:
      - tests
  push:
    branches:
      - tests

jobs:
  setup:
    runs-on: ubuntu-latest

    env:
      PG_USER: postgres
      PG_PASSWORD: bafjoiaibudfkasf
      PG_DATABASE: DOPAssignment
      PG_HOST: localhost
      PG_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: bafjoiaibudfkasf
      DB_NAME: DOPAssignment
      DB_HOST: localhost
      DB_PORT: 5432

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: bafjoiaibudfkasf
          POSTGRES_DB: DOPAssignment
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout for app
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Debug PostgreSQL logs
        run: |
          docker logs $(docker ps -q -f ancestor=postgres:17.2)

      - name: Wait for PostgreSQL to be ready
        run: |
          until PGPASSWORD=${{ env.PG_PASSWORD }} psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -c '\q'; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up"

      - name: Initialize database
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
        run: |
          psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -f ./server/database-setup.sql

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Chrome driver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Flask App
        run: |
          nohup python ./server/app.py > flask.log 2>&1 &
          echo "Flask server started"
          sleep 10

      - name: Run Behave Selenium Tests with Allure
        run: |
          python -m behave ./tests/features -f allure_behave.formatter:AllureFormatter -o allure-results --no-capture
          
      # - name: Create issue on test failure
      #   if: failure()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const issueTitle = `Behave Selenium Test Failure - ${new Date().toISOString().split('T')[0]}`;
            
      #       const issueBody = `
      #       ## Behave Selenium Test Failure Detected
            
      #       - **Failed at**: ${new Date().toISOString()}
      #       - **Workflow Run**: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}
      #       - **Commit**: ${process.env.GITHUB_SHA}
      #       - **Branch**: ${process.env.GITHUB_REF}
            
      #       ### Test Details
      #       The Behave Selenium test suite failed. Check the workflow run for detailed Allure reports and test outputs.
            
      #       ### Next Steps
      #       1. Review the Allure test results
      #       2. Check for any browser compatibility issues
      #       3. Verify test environment configuration
      #       4. Investigate potential application changes that might have affected the tests
            
      #       Please investigate the test failure and update the test suite if necessary.
      #       `;
            
      #       await github.rest.issues.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: issueTitle,
      #         body: issueBody,
      #         labels: ['test-failure', 'behave-selenium']
      #       });

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: allure-results

      - name: Upload Flask logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flask-log
          path: flask.log

      # - name: Revert commit if tests fail
      #   if: failure()
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git revert --no-edit HEAD
      #     git push origin HEAD:main  # Adjust branch if necessary

  allure_report:
    needs: setup  # Only run after tests are done
    runs-on: ubuntu-latest
    if: always()  # Run even if tests fail

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history to avoid missing history

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Ensure gh-pages branch exists
        run: |
          git fetch origin gh-pages || git checkout --orphan gh-pages

      - name: Checkout previous Allure history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0  # Ensure full history is available

      - name: Copy previous history to results
        run: |
          mkdir -p allure-results/history
          cp -r gh-pages/last-history/* allure-results/history/ || echo "No history found yet"

      - name: Generate Allure Report with History
        uses: simple-elf/allure-report-action@v1
        with:
          allure_results: allure-results
          allure_history: gh-pages/last-history  # Changed from allure-history
          gh_pages: gh-pages/last-history        # Changed from allure-history

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: gh-pages/last-history     # Changed from allure-history

      - name: Set GitHub Status for Selenium Test Report
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: Selenium test report
          state: success
          target_url: https://EkitaiKani.github.io/DOPAssignment/allure-history/
          owner: EkitaiKani
          repository: EkitaiKani/DOPAssignment
          sha: ${{ github.sha }}

  deploy:
    needs: [setup, allure_report] 
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trigger Render Deployment
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
               -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
               -H "Content-Type: application/json"
