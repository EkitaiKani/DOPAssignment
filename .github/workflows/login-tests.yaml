name: Login test
run-name: ${{ github.actor }} is testing the Login

on:
  push:
    branches:
      - github-issues

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      db_ready: ${{ steps.db-check.outputs.ready }}
    
    env:
      PG_USER: postgres
      PG_PASSWORD: bafjoiaibudfkasf
      PG_DATABASE: DOPAssignment
      PG_HOST: localhost
      PG_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: bafjoiaibudfkasf
      DB_NAME: DOPAssignment
      DB_HOST: localhost
      DB_PORT: 5432

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: bafjoiaibudfkasf
          POSTGRES_DB: DOPAssignment
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Wait for PostgreSQL and initialize
        id: db-check
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
        run: |
          until PGPASSWORD=${{ env.PG_PASSWORD }} psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -c '\q'; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up"
          psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -f ./server/database-setup.sql
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}

  test:
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install Chrome driver
        uses: nanasess/setup-chromedriver@v2

      - name: Start Flask App
        run: |
          source venv/bin/activate
          nohup python ./server/app.py > flask.log 2>&1 &
          echo "Flask server started"
          sleep 10

      - name: Run Behave Selenium Tests
        id: behave-test
        run: |
          source venv/bin/activate
          behave ./tests/features -f allure_behave.formatter:AllureFormatter -o allure-results

      - name: Create issue on test failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `Behave Selenium Test Failure - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `
            ## Behave Selenium Test Failure Detected
            
            - **Failed at**: ${new Date().toISOString()}
            - **Workflow Run**: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}
            - **Commit**: ${process.env.GITHUB_SHA}
            - **Branch**: ${process.env.GITHUB_REF}
            
            ### Test Details
            The Behave Selenium test suite failed. Check the workflow run for detailed Allure reports and test outputs.
            
            ### Next Steps
            1. Review the Allure test results
            2. Check for any browser compatibility issues
            3. Verify test environment configuration
            4. Investigate potential application changes that might have affected the tests
            
            Please investigate the test failure and update the test suite if necessary.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['test-failure', 'behave-selenium']
            });

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            allure-results
            flask.log

  allure_report:
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts
          path: .

      - name: Download previous history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 1

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1
        with:
          allure_results: allure-results
          allure_history: gh-pages/allure-history/login
          gh_pages: gh-pages/allure-history/login

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: gh-pages/allure-history/login

      - name: Update GitHub Status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: Selenium test report
          state: success
          target_url: https://EkitaiKani.github.io/DOPAssignment/allure-history/login
          owner: EkitaiKani
          repository: EkitaiKani/DOPAssignment
          sha: ${{ github.sha }}