name: Login test
run-name: ${{ github.actor }} is testing the Login

on:
  push:
    branches:
      - github-actions

jobs:
  setup:
    runs-on: ubuntu-latest

    env:
      PG_USER: postgres
      PG_PASSWORD: bafjoiaibudfkasf
      PG_DATABASE: DOPAssignment
      PG_HOST: localhost
      PG_PORT: 5432

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: bafjoiaibudfkasf
          POSTGRES_DB: DOPAssignment
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout for app
        uses: actions/checkout@v4
      
      - name: List repo
        run: ls

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Debug PostgreSQL logs
        run: |
          docker logs $(docker ps -q -f ancestor=postgres:17.2)

      - name: Test database connection
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
        run: |
          psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }}

      - name: Initialize database
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
        run: |
          psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -f ./server/database-setup.sql

      - name: Verify database setup
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
        run: |
          psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -c "SELECT * FROM students;"
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "# Database Configuration" > .env
          echo "DB_NAME=${{ env.PG_DATABASE }}" >> .env
          echo "DB_USER=${{ env.PG_USER }}" >> .env
          echo "DB_PASSWORD=${{ env.PG_PASSWORD }}" >> .env
          echo "DB_HOST=${{ env.PG_HOST }}" >> .env

      - name: Install Chromium (via apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser

      - name: Install Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      
      - name: Check Chrome version
        run: chromium-browser --version

      - name: Run Flask App
        run: |
          nohup python ./server/app.py > flask.log 2>&1 &
          echo "Flask server started"

      - name: Run login tests
        run: behave ./tests/features

      - name: Upload Flask logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: flask-log
          path: flask.log