name: Login test
run-name: ${{ github.actor }} is testing the Login

on:
  push:
    branches:
      - github-actions

jobs:
  setup:
    runs-on: ubuntu-latest

    env:
      PG_USER: postgres
      PG_PASSWORD: bafjoiaibudfkasf
      PG_DATABASE: DOPAssignment
      PG_HOST: localhost
      PG_PORT: 5432

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: bafjoiaibudfkasf
          POSTGRES_DB: DOPAssignment
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout for app
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Debug PostgreSQL logs
        run: |
          docker logs $(docker ps -q -f ancestor=postgres:17.2)

      - name: Wait for PostgreSQL to be ready
        run: |
          until PGPASSWORD=${{ env.PG_PASSWORD }} psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -c '\q'; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up"

      - name: Initialize database
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
        run: |
          psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -f ./server/database-setup.sql

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file for Flask
        run: |
          cat << EOF > .env
          # Database Configuration
          DB_NAME=${{ env.PG_DATABASE }}
          DB_USER=${{ env.PG_USER }}
          DB_PASSWORD=${{ env.PG_PASSWORD }}
          DB_HOST=${{ env.PG_HOST }}
          DB_PORT=${{ env.PG_PORT }}
          EOF

      - name: Install Chrome driver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Flask App
        run: |
          nohup python ./server/app.py > flask.log 2>&1 &
          echo "Flask server started"
          sleep 5  # Give Flask time to start

      - name: List open ports in GitHub Actions
        run: netstat -tuln

      - name: Run Behave Selenium Tests with Allure
        run: |
          behave ./tests/features -f allure_behave.formatter:AllureFormatter -o allure-results

      - name: Download previous Allure history (if available)
        uses: actions/checkout@v4
        if: always()
        with:
          ref: gh-pages  # This is where Allure history is stored
          path: gh-pages
          fetch-depth: 1

      - name: Generate Allure Report with History
        uses: simple-elf/allure-report-action@v1
        with:
          allure_results: allure-results
          allure_history: gh-pages/allure-history
          keep_reports: 10  # Keeps last 10 reports in history
          gh_pages: gh-pages

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          branch: gh-pages  # This stores Allure history across runs

      - name: Upload Flask logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flask-log
          path: flask.log